/**
 * Parts of the schema is generated by better auth
 * - Parts of User model
 * - Session model
 * - Account model
 * - Verification model
 * Use `nr auth:generate` to regenerate the auth parts of the schema.
 */

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma-types/tail-mates"
}

datasource db {
  provider = "postgresql"
  url      = env("TAIL_MATES_DATABASE_URL")
}

/**
 * ***************************************************************************
 * ** Auth
 * ***************************************************************************
 */

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  dogs Dog[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

/**
 * ***************************************************************************
 * ** Dogs
 * ***************************************************************************
 */
model Dog {
  id      String @id @default(nanoid())
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  imageUrl String

  name              String
  birthDate         DateTime
  size              ESize
  favouriteActivity String?
  gender            EGender
  neutered          Boolean  @default(false)

  joinedEvents JoinedEvent[]
}

enum EGender {
  MALE
  FEMALE
}

enum ESize {
  SMALL
  MEDIUM
  LARGE
}

/**
 * ***************************************************************************
 * ** Events
 * ***************************************************************************
 */
model Event {
  id      String @id @default(nanoid())
  comment String

  startAt  DateTime
  duration EDuration

  joined JoinedEvent[]

  locationId String
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

// Duration in minutes
enum EDuration {
  FIVE_TO_FIFTEEN_MINUTES
  FIFTEEN_TO_THIRTY_MINUTES
  THIRTY_TO_SIXTY_MINUTES
  SIXTY_MINUTES_OR_LONGER
}

model JoinedEvent {
  id        String   @id @default(nanoid())
  dogId     String
  dog       Dog      @relation(fields: [dogId], references: [id])
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
}

/**
 * ***************************************************************************
 * ** Locations
 * ***************************************************************************
 */

// Use floats for lat/long until Geo/Spatial support is added to Prisma.
// Track it here: https://github.com/prisma/prisma/issues/1798
model Location {
  id        String  @id @default(nanoid())
  latitude  Float
  longitude Float
  events    Event[]
}
